RandomGen
=========
This package contains replacements for the NumPy
:class:`~numpy.random.RandomState` object that allows the core random number
generator be be changed.

.. warning::

    .. raw:: html

       <div style="padding-top:1em;"><span style="color:#ef5350;font-weight:700;font-size:1rem;">
       Changes in 1.19
       </span></div>

    :class:`~randomgen.generator.Generator` and :class:`~randomgen.mtrand.RandomState` have been
    officially deprecated, and will warn with a ``FutureWarning`` about their removal. They will
    also receive virtually no maintenance. It is now time to move to NumPy's :class:`numpy.random.Generator`
    which has features not in :class:`~randomgen.generator.Generator` and is maintained more actively.

    A few distributions that are not present in :class:`~randomgen.generator.Generator` have been moved
    to :class:`~randomgen.generator.ExtendedGenerator`:

    * :func:`~randomgen.generator.ExtendedGenerator.multivariate_normal`: which supports broadcasting
    * :func:`~randomgen.generator.ExtendedGenerator.uintegers`: fast 32 and 64-bit uniform integers
    * :func:`~randomgen.generator.ExtendedGenerator.complex_normal`: scalar complex normals

    There are no plans to remove any of the bit generators, e.g., :class:`~randomgen.aes.AESCounter`,
    :class:`~randomgen.threefry.ThreeFry`, or :class:`~randomgen.pcg64.PCG64`.

    .. raw:: html

       <div><span style="color:#ef5350;font-weight:700;font-size:1rem;">
       Changes between 1.16 and 1.18
       </span></div>

    There are many changes between v1.16.x and v1.18.x. These reflect API
    decision taken in conjunction with NumPy in preparation of the core
    of ``randomgen`` being used as the preferred random number generator in
    NumPy. These all issue ``DeprecationWarning`` except for ``BitGenerator.generator``
    which raises ``NotImplementedError``. The C-API has also changed to reflect
    the preferred naming the underlying Pseudo-RNGs, which are now known as
    bit generators (or ``BitGenerator``).

    The main changes are

    * Rename ``RandomGenerator`` to :class:`~randomgen.generator.Generator`.
    * Rename :meth:`~randomgen.generator.Generator.randint` to
      :meth:`~randomgen.generator.Generator.integers`.
    * Rename :meth:`~randomgen.generator.Generator.random_integers` to
      :meth:`~randomgen.generator.Generator.integers`.
    * Rename :meth:`~randomgen.generator.Generator.random_sample` to
      :meth:`~randomgen.generator.Generator.random`.
    * Change ``jump`` which operated in-place to ``jumped`` which returns a new ``BitGenerator``.
    * Rename Basic RNG to bit generator, which impacts the API in multiple places where names
      like ``brng`` and ``basic_rng`` have been replaced by ``bitgen`` or ``bit_generator``.
    * Support for :class:`~randomgen.seed_sequence.SeedSequences` (also support NumPy ``SeedSequence`` instances)
    * Removed support for Python 2.7


Quick Start
-----------

Like :mod:`numpy.random`, RandomGen can be used at the module level.
This uses the default :class:`~randomgen.generator.Generator` which
uses normals provided by :class:`~randomgen.xoroshiro128.Xoroshiro128`.

.. code-block:: python

  # As replacement for numpy.random
  import randomgen.generator as random
  random.standard_normal()

:class:`~randomgen.generator.Generator` can also be used as a
replacement for :class:`~numpy.random.RandomState`, although the random
values are generated by :class:`~randomgen.xoroshiro128.Xoroshiro128`. It
also is not possible to directly seed a
:class:`~randomgen.generator.Generator`.


.. code-block:: python

  # As replacement for RandomState()
  from randomgen import Generator
  rg = Generator()
  rg.standard_normal()


Seeds can be passed to any of the bit generators. Here :class:`~randomgen.mt19937.MT19937`
is used and the :class:`~randomgen.generator.Generator` is accessed via
the property :attr:`~randomgen.mt19937.MT19937.generator`.

.. code-block:: python

  from randomgen import MT19937
  rg = MT19937(12345).generator
  rg.standard_normal()


Introduction
------------
RandomGen takes a different approach to producing random numbers from the
:class:`numpy.random.RandomState` object used in NumPy.  Random number
generation is separated into two components, a bit generator and a random
generator.

The bit generator has a limited set of responsibilities -- it manages the
underlying RNG state and provides functions to produce random doubles and
random unsigned 32- and 64-bit values. The bit generator also handles
all seeding since this varies when using alternative bit generators.

The random generator (:class:`~randomgen.generator.Generator`) takes the
bit generator-provided functions and transforms them into more useful
distributions, e.g., simulated normal random values. This structure allows
alternative bit generators to be used without code duplication.

The :class:`~randomgen.generator.Generator` is the user-facing object
that is nearly identical to :class:`~numpy.random.RandomState`. The canonical
method to initialize a generator passes a bit generator --
:class:`~randomgen.mt19937.MT19937`, the underlying RNG in NumPy  -- as the
sole argument. Note that the bit generator must be instantized.

.. code-block:: python

  from randomgen import Generator, MT19937
  rg = Generator(MT19937())
  rg.random()

Seed information is directly passed to the bit generator.

.. code-block:: python

  rg = Generator(MT19937(12345))
  rg.random()

A shorthand method is also available which uses the
:meth:`~randomgen.mt19937.MT19937.generator` property from a bit generator to
access an embedded random generator.

.. code-block:: python

  rg = MT19937(12345).generator
  rg.random()

What's New or Different
~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   Most of these changes are available in :class:`numpy.random.Generator`.
   This list is relative to NumPy 1.16.6.

* The normal, exponential and gamma generators use 256-step Ziggurat
  methods which are 2-10 times faster than NumPy's Box-Muller or inverse CDF
  implementations.
* Optional ``dtype`` argument that accepts ``np.float32`` or ``np.float64``
  to produce either single or double prevision uniform random variables for
  select distributions
* Optional ``out`` argument that allows existing arrays to be filled for
  select distributions
* Simulate from the complex normal distribution
  (:meth:`~randomgen.generator.Generator.complex_normal`)
* :func:`~randomgen.entropy.random_entropy` provides access to the system
  source of randomness that is used in cryptographic applications (e.g.,
  ``/dev/urandom`` on Unix).
* All bit generators functions to produce doubles, uint64s and
  uint32s via CTypes (:meth:`~randomgen.xoroshiro128.Xoroshiro128.ctypes`)
  and CFFI (:meth:`~randomgen.xoroshiro128.Xoroshiro128.cffi`).  This allows
  these bit generators to be used in numba.
* The bit generators can be used in downstream projects via Cython.
* Support for Lemire’s method [Lemire]_ of generating uniform integers on an
  arbitrary interval by setting ``use_masked=True`` in
  (:meth:`~randomgen.generator.Generator.integers`).


See :ref:`new-or-different` for a complete list of improvements and
differences.

Parallel Generation
~~~~~~~~~~~~~~~~~~~

The included generators can be used in parallel, distributed applications in
one of two ways:

* :ref:`independent-streams`
* :ref:`jump-and-advance`

Supported Generators
--------------------
The main innovation is the inclusion of a number of alternative pseudo-random number
generators, 'in addition' to the standard PRNG in NumPy.  The included PRNGs are:

* MT19937 - The standard NumPy generator.  Produces identical results to NumPy
  using the same seed/state. Adds a jump function that advances the generator
  as-if 2**128 draws have been made (:meth:`~randomgen.mt19937.MT19937.jumped`).
  See `NumPy's documentation`_.
* dSFMT - SSE2 enabled versions of the MT19937 generator.  Theoretically
  the same, but with a different state and so it is not possible to produce a
  sequence identical to MT19937. Supports ``jump`` and so can
  be used in parallel applications. See the `dSFMT authors' page`_.
* XoroShiro128+ - Improved version of XorShift128+ with better performance
  and statistical quality. Like the XorShift generators, it can be jumped
  to produce multiple streams in parallel applications. See
  :meth:`~randomgen.xoroshiro128.Xoroshiro128.jumped` for details.
  More information about this PRNG is available at the
  `xorshift, xoroshiro and xoshiro authors' page`_.
* XorShift1024*φ - Fast fast generator based on the XSadd
  generator. Supports ``jump`` and so can be used in
  parallel applications. See the documentation for
  :meth:`~randomgen.xorshift1024.Xorshift1024.jumped` for details. More information
  about these PRNGs is available at the
  `xorshift, xoroshiro and xoshiro authors' page`_.
* Xorshiro256** and Xorshiro512** - The most recently introduced XOR,
  shift, and rotate generator. Supports ``jump`` and so can be used in
  parallel applications. See the documentation for
  :meth:`~randomgen.xoshiro256.Xoshiro256.jumped` for details. More
  information about these PRNGs is available at the
  `xorshift, xoroshiro and xoshiro authors' page`_.
* PCG-64 - Fast generator that support many parallel streams and
  can be advanced by an arbitrary amount. See the documentation for
  :meth:`~randomgen.pcg64.PCG64.advance`. PCG-64 has a period of
  :math:`2^{128}`. See the `PCG author's page`_ for more details about
  this class of PRNG.
* ThreeFry and Philox - counter-based generators capable of being advanced an
  arbitrary number of steps or generating independent streams. See the
  `Random123`_ page for more details about this class of PRNG.

.. _`NumPy's documentation`: https://docs.scipy.org/doc/numpy/reference/routines.random.html
.. _`dSFMT authors' page`: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/
.. _`xorshift, xoroshiro and xoshiro authors' page`:  http://xoroshiro.di.unimi.it/
.. _`PCG author's page`: http://www.pcg-random.org/
.. _`Random123`: https://www.deshawresearch.com/resources_random123.html

Random Generator
----------------
.. toctree::
   :maxdepth: 1

   future
   Random Generation <generator>
   extended-generator
   legacy

Bit Generators
--------------

.. toctree::
   :maxdepth: 3

   Bit Generators <bit_generators/index>
   Seed Sequences <seed_sequence>

New Features
------------
.. toctree::
   :maxdepth: 2

   Parallel Applications <parallel>
   Multithreaded Generation <multithreading>
   new-or-different
   Comparing Performance <performance>
   extending
   custom-bit-generators.ipynb
   Reading System Entropy <entropy>
   references

Changes
~~~~~~~
.. toctree::
   :maxdepth: 2

   Change Log <change-log>

Indices and tables
~~~~~~~~~~~~~~~~~~

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
